{"version":3,"sources":["Components/Navbar.jsx","Components/Request.jsx","Components/Inspect.jsx","Components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","toggleNavbar","bind","state","isOpen","this","setState","Navbar","color","light","expand","sticky","className","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","Component","Request","data","headers","Container","Card","CardHeader","method","url","datetime","fromip","CardBody","client","Inspect","connectWS","base","window","location","host","uri","match","params","id","ws","WebSocket","onopen","console","log","onclose","onmessage","evt","addMsg","dataObj","JSON","parse","requests","concat","getRequests","a","fetch","resp","json","connected","undefined","close","showThis","length","map","item","index","key","Home","storeBucket","bucket","bucketStore","existing","localStorage","getItem","push","setItem","newStore","createBucket","res","text","redirect","Jumbotron","Button","React","App","exact","path","component","About","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.009ca222.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nexport default class NavBar extends Component {\n    constructor(props) {\n        super(props)\n        this.toggleNavbar = this.toggleNavbar.bind(this);\n        this.state = {\n            isOpen: false,\n\n        };\n    }\n\n    toggleNavbar() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n            <Navbar color=\"light\" light expand=\"md\" sticky=\"top\" className=\"shadow\">\n                <NavbarBrand tag={Link} to=\"/\">Spuky</NavbarBrand>\n                <NavbarToggler onClick={this.toggleNavbar} />\n                <Collapse isOpen={this.state.isOpen} navbar>\n                    <Nav className=\"ml-auto\" navbar>\n                        <NavItem>\n                            <NavLink tag={Link} to=\"/\">Home</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink tag={Link} to=\"/about\">About</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Container, Card, CardBody, CardText, CardTitle, CardHeader } from \"reactstrap\";\n\nexport default class Request extends Component {\nconstructor(props) {\nsuper(props)\nthis.state = {\n\n}\n}\n\n\ncomponentDidMount() {\n\n\n}\n\n\nrender() {\n    const data = this.props.data;\n    const headers = data.headers;\n    return(\n        <Container>\n            <Card >\n                <CardHeader className=\"bg-info\">\n                    <span className=\"font-weight-bold\">{data.method}</span> \n                    <span className=\"ml-1 font-weight-bold\">{data.url}</span> \n                    <span className=\"ml-3 text-black-50\">[{data.datetime}]</span> \n                    <span className=\"float-right\">{data.fromip}</span> \n                </CardHeader>\n                <CardBody>{data.client}</CardBody>\n            \n            </Card>\n        </Container>\n    )\n}\n}","import React, { Component } from \"react\";\nimport Request from \"./Request\";\n\n\nexport default class Inspect extends Component {\n    constructor(props) {\n        super(props)\n\n\n        this.state = {\n            connected: false,\n            requests: []\n        }\n\n        this.ws = undefined;\n    }\n\n\n\n    connectWS = () => {\n        const base = window.location.host;\n        const uri = `ws://${base}/bucket/ws?id=${this.props.match.params.id}`\n        //const uri = \"ws://localhost:1323/api/ws?id=\" + this.props.match.params.id\n        this.ws = new WebSocket(uri)\n\n        this.ws.onopen = function () {\n            console.log('Connected')\n            //this.setState({ connected: true })\n        }\n        this.ws.onclose = function () {\n            console.log(\"closed\");\n            //this.setState({ connected: false })\n        }\n\n        this.ws.onmessage = (evt) => { this.addMsg(evt) };\n\n\n    }\n\n    addMsg = (evt) => {\n        \n        if (evt.data != null) {\n            //console.log(evt.data);\n            \n            let dataObj = JSON.parse(evt.data);\n            \n            if(this.state.requests === null){\n                this.setState({ requests: [dataObj] })\n            } else {\n                this.setState((state) => {\n                    const requests = state.requests.concat(dataObj);\n                    return {requests};\n                })\n            }\n            \n\n        }\n    }\n\n\n    componentDidMount() {\n        this.connectWS();\n        this.getRequests();\n    }\n\n    componentWillUnmount() {\n        this.ws.close();\n    }\n\n    getRequests = async () => {\n        let resp = await fetch(`/api/bucket/${this.props.match.params.id}`)\n        let data = await resp.json();\n\n        this.setState({ requests: data });\n        //console.log(data);\n    }\n\n\n    render() {\n        const id = this.props.match.params.id;\n        const requests = this.state.requests;\n        let showThis = [];\n\n        if (requests !== null && requests.length !== 0) {\n            \n            showThis = requests.map((item, index) => {\n                return (<Request key={index} data={item} />)\n            })\n        }\n\n        return (\n            <div>\n                ID= {id} <br />\n                {showThis}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Container, Button, Jumbotron } from \"reactstrap\";\n\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            redirect: false,\n            id: \"\",\n        }\n    }\n\n    storeBucket = (bucket) => {\n        let bucketStore = [];\n        const existing = localStorage.getItem(\"buckets\");\n        bucketStore.push(existing)\n\n        if(existing === null) {\n            \n            localStorage.setItem(\"buckets\", bucket);\n        } else {\n            const newStore = bucketStore.concat(bucket);\n            localStorage.setItem(\"buckets\", newStore);\n        }\n        \n    }\n\n    createBucket = async () => {\n        let res = await fetch(\"/api/createbucket\", {\n            method: \"POST\",\n\n        })\n\n        let data = await res.text()\n        console.log(data)\n        this.storeBucket(data);\n        this.setState({id: data})\n        this.setState({redirect: true})\n        //window.location = \"/inspect/\" + data\n    }\n\n    render() {\n        if(this.state.redirect === true) {\n            return (<Redirect to={`/inspect/${this.state.id}`} />)\n        }\n        return (\n            <div >\n                <Jumbotron>\n                    <h1 className=\"display-3\">Simple HTTP bucket!</h1>\n                    <p className=\"lead\">Create a bucket for receiving http POST messages.</p>\n                    <hr className=\"my-2\" />\n                    \n                    <Container className=\"text-center\">\n                        <Button color=\"success\" onClick={this.createBucket}> Create Bucket</Button>\n                    </Container>\n                    \n                </Jumbotron>\n            </div>\n        )\n    }\n}\n\n\n\n\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport { Container } from \"reactstrap\";\nimport './App.css';\nimport NavBar from './Components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Inspect from './Components/Inspect';\nimport Home from './Components/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <Container >\n        <NavBar />\n        <Container className=\"mt-4\">\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/about\" component={About} />\n          <Route path=\"/inspect/:id\" component={Inspect} />\n        </Container>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n\n\n\nfunction About() {\n  return (\n    <div>About</div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}